#!/usr/bin/env bash
echo "-----> Injecting Django settings..."

SETTINGS_FILE=$(ls **/settings.py | head -1)
PROJECT=$(dirname $SETTINGS_FILE)
echo "Injecting code into $SETTINGS_FILE to read from DATABASE_URL" | indent

cat >>$SETTINGS_FILE <<EOF

import os
import sys
import urlparse

# Register database schemes in URLs.
urlparse.uses_netloc.append('postgres')
urlparse.uses_netloc.append('mysql')
urlparse.uses_netloc.append('sqlite')

DATABASE_URL_PREFIX = "DATABASE_URL"

try:

    # Check to make sure DATABASES is set in settings.py file.
    # If not default to {}

    if 'DATABASES' not in locals():
        DATABASES = {}


    for url_key in filter(lambda x: x.startswith(DATABASE_URL_PREFIX), os.environ):
        url = urlparse.urlparse(os.environ[url_key])
        db_ref = 'default' if url_key == DATABASE_URL_PREFIX else url_key[len(DATABASE_URL_PREFIX)+1:]

        # Ensure default database exists.
        DATABASES[db_ref] = DATABASES.get('default', {})

        # Update with environment configuration.
        DATABASES[db_ref].update({
            'NAME': url.path[1:],
            'USER': url.username or '',
            'PASSWORD': url.password or '',
            'HOST': url.hostname or '',
            'PORT': url.port or '',
        })
        if url.scheme == 'postgres':
            DATABASES[db_ref]['ENGINE'] = 'django.db.backends.postgresql_psycopg2'
        elif url.scheme == 'mysql':
            DATABASES[db_ref]['ENGINE'] = 'django.db.backends.mysql'
        elif url.scheme == 'sqlite':
            DATABASES[db_ref]['ENGINE'] = 'django.db.backends.sqlite3'
            print "WARNING: You are using sqlite as a database backend. Please make sure you know what you're doing. You almost certainly cannot expect this to work."

    if not 'default' in DATABASES:
        print "WARNING: You have not specified a 'default' database."
except Exception:
    print 'Unexpected error:', sys.exc_info()

EOF

